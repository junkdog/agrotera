// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   VelocitySystem.java

package net.onedaybeard.rebelescape.system.spatial;

import com.artemis.*;
import com.artemis.managers.TagManager;
import com.artemis.systems.EntityProcessingSystem;
import com.badlogic.gdx.math.Vector2;
import java.util.Properties;
import net.onedaybeard.dominatrix.pool.Vector2Pool;
import net.onedaybeard.dominatrix.util.SystemNTimer;
import net.onedaybeard.rebelescape.RebelEscape;
import net.onedaybeard.rebelescape.component.*;
import net.onedaybeard.rebelescape.event.DebugEvent;
import net.onedaybeard.rebelescape.stats.SessionStats;
import net.onedaybeard.rebelescape.system.BroadcasterSystem;
import net.onedaybeard.rebelescape.util.InjectableProperties;
import net.onedaybeard.rebelescape.util.InjectablePropertiesManager;

public final class VelocitySystem extends EntityProcessingSystem
    implements InjectableProperties
{

    public VelocitySystem()
    {
        super(Aspect.getAspectForAll(net/onedaybeard/rebelescape/component/Position, new Class[] {
            net/onedaybeard/rebelescape/component/Velocity, net/onedaybeard/rebelescape/component/Renderable, net/onedaybeard/rebelescape/component/Cullable
        }));
        player = null;
        mobSpeedFactor = 1.0F;
        broadcastVelocity = false;
    }

    protected void begin()
    {
        timer.start();
        if(player == null)
        {
            player = tagManager.getEntity("player");
            InjectablePropertiesManager.instance.inject(this);
        }
        if(broadcastVelocity)
            broadcasterSystem.send(net.onedaybeard.rebelescape.event.DebugEvent.Type.PLAYER_VELOCITY, ((Velocity)velocityMapper.get(player)).get.len());
    }

    protected void process(Entity e)
    {
        if(((Cullable)cullableMapper.get(e)).culled)
        {
            return;
        } else
        {
            Position position = (Position)positionMapper.get(e);
            Velocity velocity = (Velocity)velocityMapper.get(e);
            float delta = e != player ? world.delta * mobSpeedFactor : world.delta;
            Vector2 displace = Vector2Pool.vector2(velocity.get).scl(delta);
            position.pos.add(displace);
            Vector2Pool.free(displace);
            return;
        }
    }

    protected void end()
    {
        timer.stopAndPrintLog();
    }

    public void newValues(Properties properties)
    {
        String playerSpeed = properties.getProperty("player_speed");
        if(playerSpeed != null && player != null)
            ((Velocity)velocityMapper.get(player)).get.nor().scl(Float.parseFloat(playerSpeed));
    }

    public void update(SessionStats stats)
    {
        stats.addData(net.onedaybeard.rebelescape.stats.SessionStats.GameData.MOB_SPEED_FACTOR, Float.valueOf(mobSpeedFactor));
        stats.addData(net.onedaybeard.rebelescape.stats.SessionStats.GameData.PLAYER_SPEED, Float.valueOf(playerSpeed));
    }

    protected void initialize2()
    {
        positionMapper = world.getMapper(net/onedaybeard/rebelescape/component/Position);
        velocityMapper = world.getMapper(net/onedaybeard/rebelescape/component/Velocity);
        renderableMapper = world.getMapper(net/onedaybeard/rebelescape/component/Renderable);
        cullableMapper = world.getMapper(net/onedaybeard/rebelescape/component/Cullable);
        tagManager = (TagManager)world.getManager(com/artemis/managers/TagManager);
        broadcasterSystem = (BroadcasterSystem)world.getSystem(net/onedaybeard/rebelescape/system/BroadcasterSystem);
    }

    protected void initialize3()
    {
        broadcasterSystem = (BroadcasterSystem)world.getSystem(net/onedaybeard/rebelescape/system/BroadcasterSystem);
        tagManager = (TagManager)world.getManager(com/artemis/managers/TagManager);
    }

    // Missing Code Attribute
    protected void initialize(){}

    private ComponentMapper positionMapper;
    private ComponentMapper velocityMapper;
    private ComponentMapper renderableMapper;
    private ComponentMapper cullableMapper;
    private BroadcasterSystem broadcasterSystem;
    private TagManager tagManager;
    private final SystemNTimer timer = new SystemNTimer(getClass(), RebelEscape.isLogEnabled(1));
    private Entity player;
    private float mobSpeedFactor;
    private float playerSpeed;
    private boolean broadcastVelocity;
}
